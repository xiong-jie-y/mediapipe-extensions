// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception_state.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Pikapi {

  /// <summary>Holder for reflection information generated from perception_state.proto</summary>
  public static partial class PerceptionStateReflection {

    #region Descriptor
    /// <summary>File descriptor for perception_state.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PerceptionStateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZwZXJjZXB0aW9uX3N0YXRlLnByb3RvEgZwaWthcGkiKQoGVmVjdG9yEgkK",
            "AXgYASABKAISCQoBeRgCIAEoAhIJCgF6GAMgASgCIjgKClF1YXRlcm5pb24S",
            "CQoBeBgBIAEoAhIJCgF5GAIgASgCEgkKAXoYAyABKAISCQoBdxgEIAEoAiJ8",
            "CghGYWNlUG9zZRInCg9yb3RhdGlvbl92ZWN0b3IYASABKAsyDi5waWthcGku",
            "VmVjdG9yEiQKDGZyb250X3ZlY3RvchgCIAEoCzIOLnBpa2FwaS5WZWN0b3IS",
            "IQoJdXBfdmVjdG9yGAMgASgLMg4ucGlrYXBpLlZlY3RvciKbAQoTRmFjZU1v",
            "bml0b3JSZWxhdGlvbhIrChNleWVfY2FtZXJhX3Bvc2l0aW9uGAEgASgLMg4u",
            "cGlrYXBpLlZlY3RvchIrCg9leWVfY2FtZXJhX3Bvc2UYAiABKAsyEi5waWth",
            "cGkuUXVhdGVybmlvbhIqCg5jaGFyYWN0ZXJfcG9zZRgDIAEoCzISLnBpa2Fw",
            "aS5RdWF0ZXJuaW9uIqkBCgRGYWNlEh4KBmNlbnRlchgBIAEoCzIOLnBpa2Fw",
            "aS5WZWN0b3ISHgoEcG9zZRgCIAEoCzIQLnBpa2FwaS5GYWNlUG9zZRI4ChNy",
            "ZWxhdGlvbl90b19tb25pdG9yGAMgASgLMhsucGlrYXBpLkZhY2VNb25pdG9y",
            "UmVsYXRpb24SJwoPY2VudGVyX2luX3VuaXR5GAQgASgLMg4ucGlrYXBpLlZl",
            "Y3RvciJdCgZGaW5nZXISEwoLZmluZ2VyX25hbWUYASABKAkSJQoJcm90YXRp",
            "b25zGAIgAygLMhIucGlrYXBpLlF1YXRlcm5pb24SFwoPcm90YXRpb25fYW5n",
            "bGVzGAMgAygCIv4BCgRIYW5kEi4KDGdlc3R1cmVfdHlwZRgBIAEoDjIYLnBp",
            "a2FwaS5IYW5kLkdlc3R1cmVUeXBlEhUKDWdlc3R1cmVfbmFtZXMYAiADKAkS",
            "FwoPaGFuZF9leGlzdF9zaWRlGAMgASgJEh8KB2ZpbmdlcnMYBCADKAsyDi5w",
            "aWthcGkuRmluZ2VyEh4KBmNlbnRlchgFIAEoCzIOLnBpa2FwaS5WZWN0b3IS",
            "JQoNcGFsbV9yb3RhdGlvbhgGIAEoCzIOLnBpa2FwaS5WZWN0b3IiLgoLR2Vz",
            "dHVyZVR5cGUSCAoETk9ORRAAEgkKBVBJRUNFEAESCgoGV0FWSU5HEAIiRwoE",
            "Qm9uZRIgCgRwb3NlGAEgASgLMhIucGlrYXBpLlF1YXRlcm5pb24SDAoEbmFt",
            "ZRgCIAEoCRIPCgd6X2FuZ2xlGAMgASgCIiMKBEJvZHkSGwoFYm9uZXMYASAD",
            "KAsyDC5waWthcGkuQm9uZSJdCgZQZXJzb24SGgoEZmFjZRgBIAEoCzIMLnBp",
            "a2FwaS5GYWNlEhsKBWhhbmRzGAIgAygLMgwucGlrYXBpLkhhbmQSGgoEYm9k",
            "eRgDIAEoCzIMLnBpa2FwaS5Cb2R5IjEKD1BlcmNlcHRpb25TdGF0ZRIeCgZw",
            "ZW9wbGUYASADKAsyDi5waWthcGkuUGVyc29uYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Pikapi.Vector), global::Pikapi.Vector.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pikapi.Quaternion), global::Pikapi.Quaternion.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pikapi.FacePose), global::Pikapi.FacePose.Parser, new[]{ "RotationVector", "FrontVector", "UpVector" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pikapi.FaceMonitorRelation), global::Pikapi.FaceMonitorRelation.Parser, new[]{ "EyeCameraPosition", "EyeCameraPose", "CharacterPose" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pikapi.Face), global::Pikapi.Face.Parser, new[]{ "Center", "Pose", "RelationToMonitor", "CenterInUnity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pikapi.Finger), global::Pikapi.Finger.Parser, new[]{ "FingerName", "Rotations", "RotationAngles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pikapi.Hand), global::Pikapi.Hand.Parser, new[]{ "GestureType", "GestureNames", "HandExistSide", "Fingers", "Center", "PalmRotation" }, null, new[]{ typeof(global::Pikapi.Hand.Types.GestureType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pikapi.Bone), global::Pikapi.Bone.Parser, new[]{ "Pose", "Name", "ZAngle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pikapi.Body), global::Pikapi.Body.Parser, new[]{ "Bones" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pikapi.Person), global::Pikapi.Person.Parser, new[]{ "Face", "Hands", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pikapi.PerceptionState), global::Pikapi.PerceptionState.Parser, new[]{ "People" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Vector : pb::IMessage<Vector> {
    private static readonly pb::MessageParser<Vector> _parser = new pb::MessageParser<Vector>(() => new Vector());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pikapi.PerceptionStateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector(Vector other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector Clone() {
      return new Vector(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Quaternion : pb::IMessage<Quaternion> {
    private static readonly pb::MessageParser<Quaternion> _parser = new pb::MessageParser<Quaternion>(() => new Quaternion());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Quaternion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pikapi.PerceptionStateReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion(Quaternion other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      w_ = other.w_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion Clone() {
      return new Quaternion(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 4;
    private float w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Quaternion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Quaternion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (W != other.W) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      if (W != 0F) hash ^= W.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (W != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(W);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (W != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Quaternion other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.W != 0F) {
        W = other.W;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            W = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FacePose : pb::IMessage<FacePose> {
    private static readonly pb::MessageParser<FacePose> _parser = new pb::MessageParser<FacePose>(() => new FacePose());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FacePose> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pikapi.PerceptionStateReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FacePose() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FacePose(FacePose other) : this() {
      RotationVector = other.rotationVector_ != null ? other.RotationVector.Clone() : null;
      FrontVector = other.frontVector_ != null ? other.FrontVector.Clone() : null;
      UpVector = other.upVector_ != null ? other.UpVector.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FacePose Clone() {
      return new FacePose(this);
    }

    /// <summary>Field number for the "rotation_vector" field.</summary>
    public const int RotationVectorFieldNumber = 1;
    private global::Pikapi.Vector rotationVector_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pikapi.Vector RotationVector {
      get { return rotationVector_; }
      set {
        rotationVector_ = value;
      }
    }

    /// <summary>Field number for the "front_vector" field.</summary>
    public const int FrontVectorFieldNumber = 2;
    private global::Pikapi.Vector frontVector_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pikapi.Vector FrontVector {
      get { return frontVector_; }
      set {
        frontVector_ = value;
      }
    }

    /// <summary>Field number for the "up_vector" field.</summary>
    public const int UpVectorFieldNumber = 3;
    private global::Pikapi.Vector upVector_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pikapi.Vector UpVector {
      get { return upVector_; }
      set {
        upVector_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FacePose);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FacePose other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RotationVector, other.RotationVector)) return false;
      if (!object.Equals(FrontVector, other.FrontVector)) return false;
      if (!object.Equals(UpVector, other.UpVector)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rotationVector_ != null) hash ^= RotationVector.GetHashCode();
      if (frontVector_ != null) hash ^= FrontVector.GetHashCode();
      if (upVector_ != null) hash ^= UpVector.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rotationVector_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RotationVector);
      }
      if (frontVector_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FrontVector);
      }
      if (upVector_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpVector);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rotationVector_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RotationVector);
      }
      if (frontVector_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FrontVector);
      }
      if (upVector_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpVector);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FacePose other) {
      if (other == null) {
        return;
      }
      if (other.rotationVector_ != null) {
        if (rotationVector_ == null) {
          rotationVector_ = new global::Pikapi.Vector();
        }
        RotationVector.MergeFrom(other.RotationVector);
      }
      if (other.frontVector_ != null) {
        if (frontVector_ == null) {
          frontVector_ = new global::Pikapi.Vector();
        }
        FrontVector.MergeFrom(other.FrontVector);
      }
      if (other.upVector_ != null) {
        if (upVector_ == null) {
          upVector_ = new global::Pikapi.Vector();
        }
        UpVector.MergeFrom(other.UpVector);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (rotationVector_ == null) {
              rotationVector_ = new global::Pikapi.Vector();
            }
            input.ReadMessage(rotationVector_);
            break;
          }
          case 18: {
            if (frontVector_ == null) {
              frontVector_ = new global::Pikapi.Vector();
            }
            input.ReadMessage(frontVector_);
            break;
          }
          case 26: {
            if (upVector_ == null) {
              upVector_ = new global::Pikapi.Vector();
            }
            input.ReadMessage(upVector_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FaceMonitorRelation : pb::IMessage<FaceMonitorRelation> {
    private static readonly pb::MessageParser<FaceMonitorRelation> _parser = new pb::MessageParser<FaceMonitorRelation>(() => new FaceMonitorRelation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FaceMonitorRelation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pikapi.PerceptionStateReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaceMonitorRelation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaceMonitorRelation(FaceMonitorRelation other) : this() {
      EyeCameraPosition = other.eyeCameraPosition_ != null ? other.EyeCameraPosition.Clone() : null;
      EyeCameraPose = other.eyeCameraPose_ != null ? other.EyeCameraPose.Clone() : null;
      CharacterPose = other.characterPose_ != null ? other.CharacterPose.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaceMonitorRelation Clone() {
      return new FaceMonitorRelation(this);
    }

    /// <summary>Field number for the "eye_camera_position" field.</summary>
    public const int EyeCameraPositionFieldNumber = 1;
    private global::Pikapi.Vector eyeCameraPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pikapi.Vector EyeCameraPosition {
      get { return eyeCameraPosition_; }
      set {
        eyeCameraPosition_ = value;
      }
    }

    /// <summary>Field number for the "eye_camera_pose" field.</summary>
    public const int EyeCameraPoseFieldNumber = 2;
    private global::Pikapi.Quaternion eyeCameraPose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pikapi.Quaternion EyeCameraPose {
      get { return eyeCameraPose_; }
      set {
        eyeCameraPose_ = value;
      }
    }

    /// <summary>Field number for the "character_pose" field.</summary>
    public const int CharacterPoseFieldNumber = 3;
    private global::Pikapi.Quaternion characterPose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pikapi.Quaternion CharacterPose {
      get { return characterPose_; }
      set {
        characterPose_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FaceMonitorRelation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FaceMonitorRelation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EyeCameraPosition, other.EyeCameraPosition)) return false;
      if (!object.Equals(EyeCameraPose, other.EyeCameraPose)) return false;
      if (!object.Equals(CharacterPose, other.CharacterPose)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (eyeCameraPosition_ != null) hash ^= EyeCameraPosition.GetHashCode();
      if (eyeCameraPose_ != null) hash ^= EyeCameraPose.GetHashCode();
      if (characterPose_ != null) hash ^= CharacterPose.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (eyeCameraPosition_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EyeCameraPosition);
      }
      if (eyeCameraPose_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EyeCameraPose);
      }
      if (characterPose_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CharacterPose);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (eyeCameraPosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EyeCameraPosition);
      }
      if (eyeCameraPose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EyeCameraPose);
      }
      if (characterPose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CharacterPose);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FaceMonitorRelation other) {
      if (other == null) {
        return;
      }
      if (other.eyeCameraPosition_ != null) {
        if (eyeCameraPosition_ == null) {
          eyeCameraPosition_ = new global::Pikapi.Vector();
        }
        EyeCameraPosition.MergeFrom(other.EyeCameraPosition);
      }
      if (other.eyeCameraPose_ != null) {
        if (eyeCameraPose_ == null) {
          eyeCameraPose_ = new global::Pikapi.Quaternion();
        }
        EyeCameraPose.MergeFrom(other.EyeCameraPose);
      }
      if (other.characterPose_ != null) {
        if (characterPose_ == null) {
          characterPose_ = new global::Pikapi.Quaternion();
        }
        CharacterPose.MergeFrom(other.CharacterPose);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (eyeCameraPosition_ == null) {
              eyeCameraPosition_ = new global::Pikapi.Vector();
            }
            input.ReadMessage(eyeCameraPosition_);
            break;
          }
          case 18: {
            if (eyeCameraPose_ == null) {
              eyeCameraPose_ = new global::Pikapi.Quaternion();
            }
            input.ReadMessage(eyeCameraPose_);
            break;
          }
          case 26: {
            if (characterPose_ == null) {
              characterPose_ = new global::Pikapi.Quaternion();
            }
            input.ReadMessage(characterPose_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Face : pb::IMessage<Face> {
    private static readonly pb::MessageParser<Face> _parser = new pb::MessageParser<Face>(() => new Face());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Face> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pikapi.PerceptionStateReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Face() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Face(Face other) : this() {
      Center = other.center_ != null ? other.Center.Clone() : null;
      Pose = other.pose_ != null ? other.Pose.Clone() : null;
      RelationToMonitor = other.relationToMonitor_ != null ? other.RelationToMonitor.Clone() : null;
      CenterInUnity = other.centerInUnity_ != null ? other.CenterInUnity.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Face Clone() {
      return new Face(this);
    }

    /// <summary>Field number for the "center" field.</summary>
    public const int CenterFieldNumber = 1;
    private global::Pikapi.Vector center_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pikapi.Vector Center {
      get { return center_; }
      set {
        center_ = value;
      }
    }

    /// <summary>Field number for the "pose" field.</summary>
    public const int PoseFieldNumber = 2;
    private global::Pikapi.FacePose pose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pikapi.FacePose Pose {
      get { return pose_; }
      set {
        pose_ = value;
      }
    }

    /// <summary>Field number for the "relation_to_monitor" field.</summary>
    public const int RelationToMonitorFieldNumber = 3;
    private global::Pikapi.FaceMonitorRelation relationToMonitor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pikapi.FaceMonitorRelation RelationToMonitor {
      get { return relationToMonitor_; }
      set {
        relationToMonitor_ = value;
      }
    }

    /// <summary>Field number for the "center_in_unity" field.</summary>
    public const int CenterInUnityFieldNumber = 4;
    private global::Pikapi.Vector centerInUnity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pikapi.Vector CenterInUnity {
      get { return centerInUnity_; }
      set {
        centerInUnity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Face);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Face other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Center, other.Center)) return false;
      if (!object.Equals(Pose, other.Pose)) return false;
      if (!object.Equals(RelationToMonitor, other.RelationToMonitor)) return false;
      if (!object.Equals(CenterInUnity, other.CenterInUnity)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (center_ != null) hash ^= Center.GetHashCode();
      if (pose_ != null) hash ^= Pose.GetHashCode();
      if (relationToMonitor_ != null) hash ^= RelationToMonitor.GetHashCode();
      if (centerInUnity_ != null) hash ^= CenterInUnity.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (center_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Center);
      }
      if (pose_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pose);
      }
      if (relationToMonitor_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RelationToMonitor);
      }
      if (centerInUnity_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CenterInUnity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (center_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Center);
      }
      if (pose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pose);
      }
      if (relationToMonitor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RelationToMonitor);
      }
      if (centerInUnity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CenterInUnity);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Face other) {
      if (other == null) {
        return;
      }
      if (other.center_ != null) {
        if (center_ == null) {
          center_ = new global::Pikapi.Vector();
        }
        Center.MergeFrom(other.Center);
      }
      if (other.pose_ != null) {
        if (pose_ == null) {
          pose_ = new global::Pikapi.FacePose();
        }
        Pose.MergeFrom(other.Pose);
      }
      if (other.relationToMonitor_ != null) {
        if (relationToMonitor_ == null) {
          relationToMonitor_ = new global::Pikapi.FaceMonitorRelation();
        }
        RelationToMonitor.MergeFrom(other.RelationToMonitor);
      }
      if (other.centerInUnity_ != null) {
        if (centerInUnity_ == null) {
          centerInUnity_ = new global::Pikapi.Vector();
        }
        CenterInUnity.MergeFrom(other.CenterInUnity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (center_ == null) {
              center_ = new global::Pikapi.Vector();
            }
            input.ReadMessage(center_);
            break;
          }
          case 18: {
            if (pose_ == null) {
              pose_ = new global::Pikapi.FacePose();
            }
            input.ReadMessage(pose_);
            break;
          }
          case 26: {
            if (relationToMonitor_ == null) {
              relationToMonitor_ = new global::Pikapi.FaceMonitorRelation();
            }
            input.ReadMessage(relationToMonitor_);
            break;
          }
          case 34: {
            if (centerInUnity_ == null) {
              centerInUnity_ = new global::Pikapi.Vector();
            }
            input.ReadMessage(centerInUnity_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Finger : pb::IMessage<Finger> {
    private static readonly pb::MessageParser<Finger> _parser = new pb::MessageParser<Finger>(() => new Finger());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Finger> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pikapi.PerceptionStateReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Finger() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Finger(Finger other) : this() {
      fingerName_ = other.fingerName_;
      rotations_ = other.rotations_.Clone();
      rotationAngles_ = other.rotationAngles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Finger Clone() {
      return new Finger(this);
    }

    /// <summary>Field number for the "finger_name" field.</summary>
    public const int FingerNameFieldNumber = 1;
    private string fingerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FingerName {
      get { return fingerName_; }
      set {
        fingerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rotations" field.</summary>
    public const int RotationsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pikapi.Quaternion> _repeated_rotations_codec
        = pb::FieldCodec.ForMessage(18, global::Pikapi.Quaternion.Parser);
    private readonly pbc::RepeatedField<global::Pikapi.Quaternion> rotations_ = new pbc::RepeatedField<global::Pikapi.Quaternion>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pikapi.Quaternion> Rotations {
      get { return rotations_; }
    }

    /// <summary>Field number for the "rotation_angles" field.</summary>
    public const int RotationAnglesFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_rotationAngles_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> rotationAngles_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> RotationAngles {
      get { return rotationAngles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Finger);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Finger other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FingerName != other.FingerName) return false;
      if(!rotations_.Equals(other.rotations_)) return false;
      if(!rotationAngles_.Equals(other.rotationAngles_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FingerName.Length != 0) hash ^= FingerName.GetHashCode();
      hash ^= rotations_.GetHashCode();
      hash ^= rotationAngles_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FingerName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FingerName);
      }
      rotations_.WriteTo(output, _repeated_rotations_codec);
      rotationAngles_.WriteTo(output, _repeated_rotationAngles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FingerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FingerName);
      }
      size += rotations_.CalculateSize(_repeated_rotations_codec);
      size += rotationAngles_.CalculateSize(_repeated_rotationAngles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Finger other) {
      if (other == null) {
        return;
      }
      if (other.FingerName.Length != 0) {
        FingerName = other.FingerName;
      }
      rotations_.Add(other.rotations_);
      rotationAngles_.Add(other.rotationAngles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FingerName = input.ReadString();
            break;
          }
          case 18: {
            rotations_.AddEntriesFrom(input, _repeated_rotations_codec);
            break;
          }
          case 26:
          case 29: {
            rotationAngles_.AddEntriesFrom(input, _repeated_rotationAngles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Hand : pb::IMessage<Hand> {
    private static readonly pb::MessageParser<Hand> _parser = new pb::MessageParser<Hand>(() => new Hand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pikapi.PerceptionStateReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hand(Hand other) : this() {
      gestureType_ = other.gestureType_;
      gestureNames_ = other.gestureNames_.Clone();
      handExistSide_ = other.handExistSide_;
      fingers_ = other.fingers_.Clone();
      Center = other.center_ != null ? other.Center.Clone() : null;
      PalmRotation = other.palmRotation_ != null ? other.PalmRotation.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hand Clone() {
      return new Hand(this);
    }

    /// <summary>Field number for the "gesture_type" field.</summary>
    public const int GestureTypeFieldNumber = 1;
    private global::Pikapi.Hand.Types.GestureType gestureType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pikapi.Hand.Types.GestureType GestureType {
      get { return gestureType_; }
      set {
        gestureType_ = value;
      }
    }

    /// <summary>Field number for the "gesture_names" field.</summary>
    public const int GestureNamesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_gestureNames_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> gestureNames_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GestureNames {
      get { return gestureNames_; }
    }

    /// <summary>Field number for the "hand_exist_side" field.</summary>
    public const int HandExistSideFieldNumber = 3;
    private string handExistSide_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HandExistSide {
      get { return handExistSide_; }
      set {
        handExistSide_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fingers" field.</summary>
    public const int FingersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Pikapi.Finger> _repeated_fingers_codec
        = pb::FieldCodec.ForMessage(34, global::Pikapi.Finger.Parser);
    private readonly pbc::RepeatedField<global::Pikapi.Finger> fingers_ = new pbc::RepeatedField<global::Pikapi.Finger>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pikapi.Finger> Fingers {
      get { return fingers_; }
    }

    /// <summary>Field number for the "center" field.</summary>
    public const int CenterFieldNumber = 5;
    private global::Pikapi.Vector center_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pikapi.Vector Center {
      get { return center_; }
      set {
        center_ = value;
      }
    }

    /// <summary>Field number for the "palm_rotation" field.</summary>
    public const int PalmRotationFieldNumber = 6;
    private global::Pikapi.Vector palmRotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pikapi.Vector PalmRotation {
      get { return palmRotation_; }
      set {
        palmRotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GestureType != other.GestureType) return false;
      if(!gestureNames_.Equals(other.gestureNames_)) return false;
      if (HandExistSide != other.HandExistSide) return false;
      if(!fingers_.Equals(other.fingers_)) return false;
      if (!object.Equals(Center, other.Center)) return false;
      if (!object.Equals(PalmRotation, other.PalmRotation)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GestureType != 0) hash ^= GestureType.GetHashCode();
      hash ^= gestureNames_.GetHashCode();
      if (HandExistSide.Length != 0) hash ^= HandExistSide.GetHashCode();
      hash ^= fingers_.GetHashCode();
      if (center_ != null) hash ^= Center.GetHashCode();
      if (palmRotation_ != null) hash ^= PalmRotation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GestureType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) GestureType);
      }
      gestureNames_.WriteTo(output, _repeated_gestureNames_codec);
      if (HandExistSide.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(HandExistSide);
      }
      fingers_.WriteTo(output, _repeated_fingers_codec);
      if (center_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Center);
      }
      if (palmRotation_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(PalmRotation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GestureType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GestureType);
      }
      size += gestureNames_.CalculateSize(_repeated_gestureNames_codec);
      if (HandExistSide.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HandExistSide);
      }
      size += fingers_.CalculateSize(_repeated_fingers_codec);
      if (center_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Center);
      }
      if (palmRotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PalmRotation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hand other) {
      if (other == null) {
        return;
      }
      if (other.GestureType != 0) {
        GestureType = other.GestureType;
      }
      gestureNames_.Add(other.gestureNames_);
      if (other.HandExistSide.Length != 0) {
        HandExistSide = other.HandExistSide;
      }
      fingers_.Add(other.fingers_);
      if (other.center_ != null) {
        if (center_ == null) {
          center_ = new global::Pikapi.Vector();
        }
        Center.MergeFrom(other.Center);
      }
      if (other.palmRotation_ != null) {
        if (palmRotation_ == null) {
          palmRotation_ = new global::Pikapi.Vector();
        }
        PalmRotation.MergeFrom(other.PalmRotation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            gestureType_ = (global::Pikapi.Hand.Types.GestureType) input.ReadEnum();
            break;
          }
          case 18: {
            gestureNames_.AddEntriesFrom(input, _repeated_gestureNames_codec);
            break;
          }
          case 26: {
            HandExistSide = input.ReadString();
            break;
          }
          case 34: {
            fingers_.AddEntriesFrom(input, _repeated_fingers_codec);
            break;
          }
          case 42: {
            if (center_ == null) {
              center_ = new global::Pikapi.Vector();
            }
            input.ReadMessage(center_);
            break;
          }
          case 50: {
            if (palmRotation_ == null) {
              palmRotation_ = new global::Pikapi.Vector();
            }
            input.ReadMessage(palmRotation_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Hand message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum GestureType {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("PIECE")] Piece = 1,
        [pbr::OriginalName("WAVING")] Waving = 2,
      }

    }
    #endregion

  }

  public sealed partial class Bone : pb::IMessage<Bone> {
    private static readonly pb::MessageParser<Bone> _parser = new pb::MessageParser<Bone>(() => new Bone());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Bone> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pikapi.PerceptionStateReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bone() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bone(Bone other) : this() {
      Pose = other.pose_ != null ? other.Pose.Clone() : null;
      name_ = other.name_;
      zAngle_ = other.zAngle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bone Clone() {
      return new Bone(this);
    }

    /// <summary>Field number for the "pose" field.</summary>
    public const int PoseFieldNumber = 1;
    private global::Pikapi.Quaternion pose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pikapi.Quaternion Pose {
      get { return pose_; }
      set {
        pose_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "z_angle" field.</summary>
    public const int ZAngleFieldNumber = 3;
    private float zAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ZAngle {
      get { return zAngle_; }
      set {
        zAngle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Bone);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Bone other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pose, other.Pose)) return false;
      if (Name != other.Name) return false;
      if (ZAngle != other.ZAngle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pose_ != null) hash ^= Pose.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ZAngle != 0F) hash ^= ZAngle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pose_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pose);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (ZAngle != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(ZAngle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pose);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ZAngle != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Bone other) {
      if (other == null) {
        return;
      }
      if (other.pose_ != null) {
        if (pose_ == null) {
          pose_ = new global::Pikapi.Quaternion();
        }
        Pose.MergeFrom(other.Pose);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ZAngle != 0F) {
        ZAngle = other.ZAngle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pose_ == null) {
              pose_ = new global::Pikapi.Quaternion();
            }
            input.ReadMessage(pose_);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 29: {
            ZAngle = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Body : pb::IMessage<Body> {
    private static readonly pb::MessageParser<Body> _parser = new pb::MessageParser<Body>(() => new Body());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Body> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pikapi.PerceptionStateReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Body() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Body(Body other) : this() {
      bones_ = other.bones_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Body Clone() {
      return new Body(this);
    }

    /// <summary>Field number for the "bones" field.</summary>
    public const int BonesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pikapi.Bone> _repeated_bones_codec
        = pb::FieldCodec.ForMessage(10, global::Pikapi.Bone.Parser);
    private readonly pbc::RepeatedField<global::Pikapi.Bone> bones_ = new pbc::RepeatedField<global::Pikapi.Bone>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pikapi.Bone> Bones {
      get { return bones_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Body);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Body other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!bones_.Equals(other.bones_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= bones_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      bones_.WriteTo(output, _repeated_bones_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bones_.CalculateSize(_repeated_bones_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Body other) {
      if (other == null) {
        return;
      }
      bones_.Add(other.bones_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bones_.AddEntriesFrom(input, _repeated_bones_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Person : pb::IMessage<Person> {
    private static readonly pb::MessageParser<Person> _parser = new pb::MessageParser<Person>(() => new Person());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Person> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pikapi.PerceptionStateReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Person() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Person(Person other) : this() {
      Face = other.face_ != null ? other.Face.Clone() : null;
      hands_ = other.hands_.Clone();
      Body = other.body_ != null ? other.Body.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Person Clone() {
      return new Person(this);
    }

    /// <summary>Field number for the "face" field.</summary>
    public const int FaceFieldNumber = 1;
    private global::Pikapi.Face face_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pikapi.Face Face {
      get { return face_; }
      set {
        face_ = value;
      }
    }

    /// <summary>Field number for the "hands" field.</summary>
    public const int HandsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pikapi.Hand> _repeated_hands_codec
        = pb::FieldCodec.ForMessage(18, global::Pikapi.Hand.Parser);
    private readonly pbc::RepeatedField<global::Pikapi.Hand> hands_ = new pbc::RepeatedField<global::Pikapi.Hand>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pikapi.Hand> Hands {
      get { return hands_; }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 3;
    private global::Pikapi.Body body_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pikapi.Body Body {
      get { return body_; }
      set {
        body_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Person);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Person other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Face, other.Face)) return false;
      if(!hands_.Equals(other.hands_)) return false;
      if (!object.Equals(Body, other.Body)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (face_ != null) hash ^= Face.GetHashCode();
      hash ^= hands_.GetHashCode();
      if (body_ != null) hash ^= Body.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (face_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Face);
      }
      hands_.WriteTo(output, _repeated_hands_codec);
      if (body_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Body);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (face_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Face);
      }
      size += hands_.CalculateSize(_repeated_hands_codec);
      if (body_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Person other) {
      if (other == null) {
        return;
      }
      if (other.face_ != null) {
        if (face_ == null) {
          face_ = new global::Pikapi.Face();
        }
        Face.MergeFrom(other.Face);
      }
      hands_.Add(other.hands_);
      if (other.body_ != null) {
        if (body_ == null) {
          body_ = new global::Pikapi.Body();
        }
        Body.MergeFrom(other.Body);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (face_ == null) {
              face_ = new global::Pikapi.Face();
            }
            input.ReadMessage(face_);
            break;
          }
          case 18: {
            hands_.AddEntriesFrom(input, _repeated_hands_codec);
            break;
          }
          case 26: {
            if (body_ == null) {
              body_ = new global::Pikapi.Body();
            }
            input.ReadMessage(body_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PerceptionState : pb::IMessage<PerceptionState> {
    private static readonly pb::MessageParser<PerceptionState> _parser = new pb::MessageParser<PerceptionState>(() => new PerceptionState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PerceptionState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pikapi.PerceptionStateReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PerceptionState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PerceptionState(PerceptionState other) : this() {
      people_ = other.people_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PerceptionState Clone() {
      return new PerceptionState(this);
    }

    /// <summary>Field number for the "people" field.</summary>
    public const int PeopleFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pikapi.Person> _repeated_people_codec
        = pb::FieldCodec.ForMessage(10, global::Pikapi.Person.Parser);
    private readonly pbc::RepeatedField<global::Pikapi.Person> people_ = new pbc::RepeatedField<global::Pikapi.Person>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pikapi.Person> People {
      get { return people_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PerceptionState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PerceptionState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!people_.Equals(other.people_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= people_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      people_.WriteTo(output, _repeated_people_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += people_.CalculateSize(_repeated_people_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PerceptionState other) {
      if (other == null) {
        return;
      }
      people_.Add(other.people_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            people_.AddEntriesFrom(input, _repeated_people_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
